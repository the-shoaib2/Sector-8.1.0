// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

/*
  npx prisma generate 
  npx prisma db push
  
*/

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

/// USER MODEL
model User {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String           @unique
  emailVerified    DateTime?
  password         String?          // For credentials authentication
  image            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  isActive         Boolean          @default(true)
  resetToken       String?          
  resetTokenExpiry DateTime?
  role             Role             @default(USER)

  // RELATIONS
  accounts         Account[]
  sessions         Session[]

  @@index([emailVerified, isActive])
  @@index([resetToken])
  @@index([createdAt])
}

enum Role {
  SUPER
  ADMIN
  USER
}

/// ACCOUNT MODEL
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([provider, providerAccountId])
  @@index([userId])
}

/// SESSION MODEL
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId      String   @db.ObjectId
  expires     DateTime
  ipAddress   String?
  userAgent   String?
  deviceType  String?
  deviceModel String?
  city        String?
  country     String?
  latitude    Float?
  longitude   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expires])
}

/// VERIFICATION TOKEN MODEL
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}



